"use strict";(self.webpackChunkacdocs=self.webpackChunkacdocs||[]).push([[584],{5388:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"introduction/what-is-serverless-caching","title":"What is Serverless Caching?","description":"Serverless is one of the hottest trends in software development, and we\'re seeing an explosion in \\"serverless-friendly\\" services.","source":"@site/docs/introduction/what-is-serverless-caching.md","sourceDirName":"introduction","slug":"/introduction/what-is-serverless-caching","permalink":"/introduction/what-is-serverless-caching","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"cacheSidebar","previous":{"title":"Introduction","permalink":"/category/introduction"},"next":{"title":"Common Caching Patterns","permalink":"/introduction/common-caching-patterns"}}');var i=n(4848),t=n(8453);const o={sidebar_position:1},a="What is Serverless Caching?",l={},c=[{value:"Serverless as an operational model",id:"serverless-as-an-operational-model",level:2},{value:"Serverless as compatibility with related architectures",id:"serverless-as-compatibility-with-related-architectures",level:2},{value:"Serverless as independent project platform",id:"serverless-as-independent-project-platform",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={h1:"h1",h2:"h2",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"what-is-serverless-caching",children:"What is Serverless Caching?"})}),"\n",(0,i.jsx)(s.p,{children:'Serverless is one of the hottest trends in software development, and we\'re seeing an explosion in "serverless-friendly" services.'}),"\n",(0,i.jsx)(s.p,{children:"..."}),"\n",(0,i.jsx)(s.h2,{id:"serverless-as-an-operational-model",children:"Serverless as an operational model"}),"\n",(0,i.jsx)(s.p,{children:"The first way people use the term \"serverless\" is to describe the operational mechanics of a particular service. This is my preferred definition of serverless and the one closest to its original, unadulterated definition. Let's call this the 'traditional' definition of serverless."}),"\n",(0,i.jsx)(s.p,{children:"..."}),"\n",(0,i.jsx)(s.h2,{id:"serverless-as-compatibility-with-related-architectures",children:"Serverless as compatibility with related architectures"}),"\n",(0,i.jsx)(s.p,{children:'In the first definition of serverless above, serverless is defined as a set of operational mechanics when using a particular service. In this second definition, we\'ll look at a definition of serverless that I call "serverless-friendly" due to its general compatibility with serverless architectures.'}),"\n",(0,i.jsx)(s.p,{children:"..."}),"\n",(0,i.jsx)(s.h2,{id:"serverless-as-independent-project-platform",children:"Serverless as independent project platform"}),"\n",(0,i.jsx)(s.p,{children:"The final category of serverlessness is less a specific concept and more a group of people or style of application."}),"\n",(0,i.jsx)(s.p,{children:"..."}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(s.p,{children:"In this page, you learned how AkkaCache.io fits with every conception of serverless."}),"\n",(0,i.jsx)(s.p,{children:"..."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var r=n(6540);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);