# use https://editor-next.swagger.io/ to validate this file
openapi: 3.1.0
info:
  title: Akka Cache
  description: |-
    This is Akka Cache a high speed, globally elastic, multi-region distributed key-value cache built upon Akka 3.
  contact:
    email: TBD
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
# probably need to comment out servers below when generating
servers: [ { url: http://localhost:9001 } ]
tags:
  - name: cacheName
    description: APIs used to maintain a cache namespace or group.
    externalDocs:
      description: Find out more about cacheNames
      url: TBD
  - name: cache
    description: APIs used to create, retrieve, and delete cached objects.
    externalDocs:
      description: Find out more about caches.
      url: TBD
  - name: batch
    description: Batch APIs used to create, retrieve, and delete cached objects.
    externalDocs:
      description: Find out more about the batched APIs
      url: TBD
security:
  - bearerHttpAuthentication: []
paths:
  # cacheName APIs START here
  /cacheName:
    post:
      tags:
        - cacheName
      summary: Create or update a cache namespace description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cacheNameCreate'
      responses:
        "201":
          description: (created) Successfully created or updated.
    put:
      tags:
        - cacheName
      summary: Create or update a cache namespace description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cacheNameCreate'
      responses:
        "202":
          description: "(accepted) Successfully created or updated."
  /cacheName/{cacheName}:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
    get:
      tags:
        - cacheName
      summary: get the current cache namespace description, and delete status
      responses:
        "200":
          description: returned a JSON format of the cache namespace, and description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cacheNameResponse'
        "400":
          description: (bad request) doesn't exist
    delete:
      tags:
        - cacheName
      summary: delete the current cache namespace and all associated caches
      responses:
        "202":
          description: (accepted) deleted
  /cacheName/{cacheName}/keys:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
    get:
      tags:
        - cacheName
      summary: get the current cache namespace description, and delete status
      responses:
        "200":
          description: returned a JSON format of the cache namespace, and description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cacheNameKeys'
        "400":
          description: (bad request) doesn't exist
  /cacheName/{cacheName}/flush:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
    put:
      tags:
        - cacheName
      summary: deletes all existing cached objects but leaves the cache namespace in place
      responses:
        "202":
          description: accepted
        "400":
          description: (bad request) doesn't exist
  # cacheName APIs END here
  # cacheName / cache specific APIs START here
  /{cacheName}/{key}:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
      - $ref: '#/components/parameters/keyParam'
    post:
      tags:
        - cache
      summary: Create or update a cached object under the cacheName
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/byteArray'
      responses:
        "201":
          description: (created) Successfully created or updated.
        "400":
          description: (bad request) Potentially exceeded maximum cached bytes allowed
    delete:
      tags:
        - cache
      summary: delete the current cache by key within the cacheName
      responses:
        "202":
          description: (accepted) deleted
    get:
      tags:
        - cache
      summary: get the current cache by key within the cacheName
      responses:
        "200":
          description: Okay
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/byteArray'
        "404":
          description: Not Found
  /{cacheName}/{key}/{ttlSeconds}:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
      - $ref: '#/components/parameters/keyParam'
      - $ref: '#/components/parameters/ttlSecondsParam'
    post:
      tags:
        - cache
      summary: Create or update a cached object under the cacheName
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/byteArray'
      responses:
        "201":
          description: (created) Successfully created or updated.
        "400":
          description: (bad request) Potentially exceeded maximum cached bytes allowed
  /set:
    post:
      tags:
        - cache
      summary: Create or update a cached object by cacheName / key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cacheRequest'
      responses:
        "201":
          description: (created) Successfully created or updated.
        "400":
          description: (bad request) Invalid cacheRequest, or potentially exceeded maximum cached bytes allowed.
  # cacheName / cache specific APIs END here
  /get/{cacheName}/{key}:
    parameters:
      - $ref: '#/components/parameters/cacheNameParam'
      - $ref: '#/components/parameters/keyParam'
    get:
      tags:
        - cache
      summary: get the current cache namespace description, and delete status
      responses:
        "200":
          description: returned a JSON format of the cache namespace, and description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cacheGetResponse'
  /batch:
    post:
      tags:
        - batch
      summary: Create batch of cached objects, results are returned for each batch element
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchCacheRequest'
      responses:
        "200":
          description: returned a JSON formated object of overall cached results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchCacheResponse'
    delete:
      tags:
        - batch
      summary: delete a batch of individual cached objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchGetCacheRequests'
      responses:
        "200":
          description: returned a JSON formated object of overall cached results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchDeleteCacheResponse'
  /batch/get:
    post:
      tags:
        - batch
      summary: retrieve a batch of cached objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchGetCacheRequests'
      responses:
        "200":
          description: returned a JSON formated object of overall cached results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchGetCacheResponse'
components:
  securitySchemes:
    bearerHttpAuthentication:
      description: Bearer token using a JWT
      type: http
      scheme: Bearer
      bearerFormat: JWT
  parameters:
    cacheNameParam:
      description: name of a cache (group)
      name: cacheName
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/cacheName'
    keyParam:
      description: key of a specific cache object within a cacheName
      name: key
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/key'
    ttlSecondsParam:
      description: Time to Live of the cached object
      name: ttlSeconds
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ttlSeconds'
  schemas:
    cacheName:
      type: string
      description: name of a cache namespace
    description:
      type: string
      description: description of a cache name
    deleted:
      type: boolean
      description: false if not deleted
    cacheNameCreate:
      type: object
      properties:
        cacheName:
          type: string
        description:
          type: string
    cacheNameResponse:
      type: object
      description: the complete cacheName object
      properties:
        cacheName:
          type: string
        description:
          type: string
        deleted:
          type: boolean
    cacheNameKeys:
      type: array
      description: an array of all known keys under the given cacheName
      items:
        type: string
    key:
      type: string
      description: unique key to the cache within the cacheName
    ttlSeconds:
      type: integer
      description: Time to Live of the cached object
    byteArray:
      type: string
      format: byte
    cacheRequest:
      type: object
      properties:
        cacheName:
          type: string
        key:
          type: string
        ttlSeconds:
          type: integer
        value: # byte[]
          type: string
          format: byte
    cacheGetResponse:
      type: object
      properties:
        cacheName:
          type: string
        key:
          type: string
        success:
          type: boolean
        value: # byte[]
          type: string
          format: byte
    batchCacheRequest:
      type: array
      schema:
        $ref: '#/components/schemas/cacheRequest'
    batchCacheResult:
      type: object
      properties:
        cacheName:
          type: string
        key:
          type: string
        success:
          type: boolean
    batchCacheResponse:
      type: object
      properties:
        complete:
          type: boolean
        results:
          type: array
          schema:
            $ref: '#/components/schemas/batchCacheResult'
    batchGetCacheRequest:
      type: object
      properties:
        cacheName:
          type: string
        key:
          type: string
    batchGetCacheRequests:
      type: array
      schema:
        $ref: '#/components/schemas/batchGetCacheRequest'
    cacheDeleteResponse:
      type: object
      properties:
        cacheName:
          type: string
        key:
          type: string
        success:
          type: boolean
    batchDeleteCacheResponse:
      type: array
      schema:
        $ref: '#/components/schemas/cacheDeleteResponse'
    batchGetCacheResponse:
      type: object
      properties:
        complete:
          type: boolean
        results:
          type: array
          schema:
            $ref: '#/components/schemas/cacheGetResponse'